name: Fetch Polymarket Data and Deploy

on:
  schedule:
    # Run every 15 minutes
    - cron: '*/15 * * * *'
  workflow_dispatch: # Allow manual triggers
  push:
    branches: [ master ]

# Required for GitHub Pages deployment
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  fetch-data:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for proper git operations

    - name: Install uv
      uses: astral-sh/setup-uv@v7
      with:
        enable-cache: true

    - name: Install dependencies
      run: uv sync --frozen

    - name: Restore previous data
      continue-on-error: true
      run: |
        # Download the current GitHub Pages deployment to get previous data
        # This allows us to reuse existing statements/categories for unchanged markets
        curl -sL "${{ github.event.repository.html_url }}" -o index.html.tmp || true
        if [ -f index.html.tmp ]; then
          # Extract the deployed site URL and download data/markets.json
          mkdir -p data
          curl -sL "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/data/markets.json" -o data/markets.json 2>/dev/null || true
          if [ -f data/markets.json ]; then
            echo "✅ Restored previous markets.json ($(wc -l < data/markets.json) lines)"
          else
            echo "⚠️  No previous markets.json found (first run or deployment issue)"
          fi
          rm -f index.html.tmp
        fi

    - name: Fetch market data
      env:
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      run: uv run python scripts/fetch_markets.py

    - name: Prepare deployment files
      run: |
        mkdir -p _site
        cp -r *.html *.css *.js data/ _site/ 2>/dev/null || true
        # Copy any other web assets if they exist
        [ -d assets ] && cp -r assets _site/ || true
        [ -d images ] && cp -r images _site/ || true

    - name: Upload GitHub Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: _site

  deploy:
    needs: fetch-data
    runs-on: ubuntu-latest

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
